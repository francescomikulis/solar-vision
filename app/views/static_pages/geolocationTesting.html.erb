<% provide(:title, "About") %>
<h1>About</h1>
<p>
  <FONT COLOR="#FF00FF">
    I am currently developing the app!
  </FONT>
</p>

<%#= form_tag locations_path, :method => :get do %>
  <p><%#= hidden_field_tag :latitude %>
     <%#= hidden_field_tag :longitude %>
     <%#= submit_tag "Search ME", :name => nil %>
  </p>
<%# end %>



<html>
 //https://api.sunrise-sunset.org/json?lat=36.7201600&lng=-4.4203400&date=today
 
 //alert("Latitude: " + position.coords.latitude);
 
 <script type="text/javascript" src="sun.js"></script>
 <%= javascript_include_tag "sun" %>
<%= image_tag("Mars.jpg", :alt => "test", :size => "260x180") %>
 
 
 <script type="text/javascript" src="https://wildcatsunh-my.sharepoint.com/personal/fam1001_wildcats_unh_edu/Documents/UNH%20Projects/Spring%202017/Nasa%20Space%20Apps%20Challenge/sunShared.js"></script>
 
 <script type="text/javascript" src="https://wildcatsunh-my.sharepoint.com/personal/fam1001_wildcats_unh_edu/_layouts/15/guestaccess.aspx?docid=1b25ca5963fc94ae0bd7a7e84aaf8460d&authkey=AfzHdRp8rNPdfpMVk0jkAp0"></script>
 
 <script>
  var latitude = 23.439281; //best possible
  var longitude = -82.248350; //best possible
  
    function functionOne() {
        
        var date = new Date();
        var month = date.getMonth() + 1;
        var year = date.getYear();
        var pi = 3.14159265;
        var tilt = ( 23.439281 * ( pi / 180 ) );
        //ϕs = ((day of year-June 22 )/365)2pi
        
        latitude = parseFloat(prompt("Input latitude") );
        longitude = parseFloat(prompt("Input longitude") );
        hours = parseInt( prompt("Input hour") );
        day = parseInt( prompt("Input day") );
        month = parseInt( prompt("Input month") );
        var days = parseInt( setDays( month, day ) );
        minutes = parseInt( date.getMinutes() );
        spoofDate = new Date( parseInt(year), parseInt(month),
            parseInt(day), parseInt(hours), parseInt(minutes), 0, 0);
        
        var times = SunCalc.getTimes( spoofDate, latitude, longitude );
        alert( "Latitude: " + latitude + ", Longitude: " + longitude + "times "
            + times.sunrise.getHours() + " : " + times.sunrise.getMinutes() + "\n"
            + times.sunset.getHours() + " : " + times.sunset.getMinutes() );
        sunRiseH = times.sunrise.getHours();
        sunRiseM = times.sunrise.getMinutes();
        sunSetH = times.sunset.getHours();
        sunSetM = times.sunset.getMinutes();
        //alert( "Sunrise: " + sunRiseH + "-" + sunRiseM + ", Sunset: " + sunSetH + "-" + sunSetM );
        
        var sunset = sunSetH + sunSetM/60;
	    var sunrise = sunRiseH + sunRiseM/60;
        //ϕ – ϕs = ((hour of day-12)/24)2pi //azimuth
        var p2 = ( ( (days - 173 ) / 365 ) * 2 * pi ); //**********************
        var angle = pi / ( sunset-sunrise );
        var scalarForTimePast = ( ( hours + minutes/60 ) - ( sunRiseH + sunRiseM/60 ) );
        if( scalarForTimePast > ( sunset - sunrise ) )
            scalarForTimePast = 0;
            
        // WOULD FORCE THE MAX scalarForTimePast = ( sunset - sunrise ) / 2;
        
        var p1 = ( Math.sin( scalarForTimePast * angle ) ); //*************************
        //Θ = pi/2 – latitude
        var theta = 0;
       
        var tracking = false;
        if ( tracking == true )
        {
            theta = Math.atan( Math.cos( tilt ) / ( Math.sin( tilt ) * Math.cos( p2 ) ) );
        }
        else
        {
            theta = ( pi/2 - ( latitude * pi / 180 ) );
        }
        
        var sunCoeff = 0; //this is the value we are solving for
        //final form = 1.36kw/m2*(s*r)
        sunCoeff = ( ( 1 / Math.sqrt( Math.pow( Math.cos(p2), 2 ) * Math.pow( Math.cos(tilt), 2 ) + 
        Math.pow( Math.sin(p2), 2 ) + Math.pow( Math.sin(tilt), 2 ) ) ) * ( Math.sin( theta ) * 
        Math.cos( tilt ) * p1 + ( Math.cos( theta ) * Math.cos( p2 ) * Math.sin( tilt ) ) ) ); 
        //sc = [1/√(cos2(p2)cos2(tilt)  + sin2(p2)+sin2(titl))[sin(theta)cos(tilt)p1]
        
        //if( sunCoeff < 0 )
        //    sunCoeff = 0;
        alert("Sun - coefficient " + sunCoeff + "month: " + month + " date: " + day + " hours: " + hours + " p1 " + p1 + " scalarForTimePast " + scalarForTimePast );
    }
    
    function setDays( months, d )
    {
        var num = 0;
    	if ( months > 1 ) num += 31;
    	if ( months > 2 ) num += 28;
    	if ( months > 3 ) num += 31;
    	if ( months > 4 ) num += 30;
    	if ( months > 5 ) num += 31;
        if ( months > 6 ) num += 30;
    	if ( months > 7 ) num += 31;
    	if ( months > 8 ) num += 31;
        if ( months > 9 ) num += 30;
        if ( months > 10 ) num += 31;
        if ( months > 11 ) num += 30;
        if ( months > 12 ) num += 31;
    	num += parseInt( d );
    	return num;
	}
 
  </script>
  
 <!-- displayPosition(); -->
 
 
</html>

  <div>
     <p><a href="javascript:functionOne();">Function one</a></p>
 </div>